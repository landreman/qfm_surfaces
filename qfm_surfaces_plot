#!/usr/bin/env python

import numpy as np
from scipy.io import netcdf
import sys, os
import warnings

print "Usage: "+__file__+" qfm_surfaces_out.*.nc"

if len(sys.argv) != 2:
    print "Error! You must specify 1 argument: the qfm_surfaces_out.*.nc file"
    exit(1)

filename = sys.argv[1]
print "Reading filename "+filename
f = netcdf.netcdf_file(filename,mode='r',mmap=False)

N_volumes = f.variables['N_volumes'][()]
nfp = f.variables['nfp'][()]
R0c = f.variables['R0c'][()]
Z0s = f.variables['Z0s'][()]
xm = f.variables['xm'][()]
xn = f.variables['xn'][()]
amnc = f.variables['amnc'][()]
quadratic_flux_convergence = f.variables['quadratic_flux_convergence'][()]
quadratic_flux = f.variables['quadratic_flux'][()]
areas = f.variables['areas'][()]
print "amnc.shape:",amnc.shape

f.close()

mnmax = len(xm)

phi = np.linspace(0,2*np.pi/nfp,4,endpoint=False)
R = np.zeros(4)
Z = np.zeros(4)
for n in range(len(R0c)):
    R += R0c[n] * np.cos(n*nfp*phi)
    Z += Z0s[n] * np.sin(n*nfp*phi)

N_theta = 100
theta = np.linspace(0,2*np.pi,N_theta)
phi2D, theta2D = np.meshgrid(phi,theta)
print "phi2D.shape:",phi2D.shape
Rs = np.zeros((N_theta,4,N_volumes))
Zs = np.zeros((N_theta,4,N_volumes))
a = np.zeros((N_theta,4,N_volumes))

for j_volume in range(N_volumes):
    for jmn in range(len(xm)):
        a[:,:,j_volume] += amnc[j_volume,jmn]*np.cos(xm[jmn]*theta2D-nfp*xn[jmn]*phi2D)
    for j in range(4):
        Rs[:,j,j_volume] = R[j]
        Zs[:,j,j_volume] = Z[j]
    Rs[:,:,j_volume] += a[:,:,j_volume] * np.cos(theta2D)
    Zs[:,:,j_volume] += a[:,:,j_volume] * np.sin(theta2D)


zmax = np.max(np.abs(Zs))
print "zmax:",zmax

###########################################
###########################################

import matplotlib.pyplot as plt

fig = plt.figure(figsize=(16,7))
fig.patch.set_facecolor('white')

numRows = 2
numCols = 2

for jphi in range(3):
    plt.subplot(numRows,numCols,jphi+1)
    plt.plot(R[jphi],Z[jphi],'+k')
    for j_volume in range(N_volumes):
        plt.plot(Rs[:,jphi,j_volume], Zs[:,jphi,j_volume],'.-')
    plt.xlabel('R')
    plt.ylabel('Z')
    plt.axis('equal')
    plt.ylim([-zmax,zmax])

plt.subplot(numRows,numCols,4)
plt.semilogy(quadratic_flux,'.-',label='Quadratic flux')
plt.semilogy(quadratic_flux / areas,'.-',label='Quadratic flux / Area')
plt.xlabel('Volume index')
plt.legend(loc=0,fontsize=6)

plt.tight_layout()

###########################################
###########################################

fig = plt.figure(figsize=(16,7))
fig.patch.set_facecolor('white')

numRows = 1
numCols = 2

plt.subplot(numRows,numCols,1)
print "quadratic_flux_convergence.shape:",quadratic_flux_convergence.shape
for j_volume in range(N_volumes):
    plt.semilogy(quadratic_flux_convergence[j_volume,:],'.-',label='volume '+str(j_volume))
plt.legend(loc=0,fontsize=6)
plt.xlabel('Resolution index')
plt.title('Quadratic flux')

plt.subplot(numRows,numCols,2)
mpol = np.max(xm)
ntor = np.max(xn)
amnc_2D = np.zeros((mpol+1, ntor*2+1))
for imn in range(mnmax):
    amnc_2D[xm[imn],xn[imn]+ntor] = amnc[-1,imn]
with warnings.catch_warnings(): # Block warning message that results from attempting to evaluate log(0)
    warnings.simplefilter("ignore")
    plt.imshow(np.log10(np.abs(amnc_2D)),interpolation='nearest',extent=[-ntor-0.5,ntor+0.5,mpol+0.5,-0.5])
plt.title('log10(amnc) for outermost surface')
plt.xlabel('n')
plt.ylabel('m')
plt.colorbar()

###########################################
###########################################

fig = plt.figure(figsize=(16,7))
fig.patch.set_facecolor('white')

numCols = np.ceil(np.sqrt(N_volumes))
numRows = np.ceil(N_volumes / numCols)

for j_volume in range(N_volumes):
    plt.subplot(numRows,numCols,j_volume+1)
    amnc_2D = np.zeros((mpol+1, ntor*2+1))
    for imn in range(mnmax):
        amnc_2D[xm[imn],xn[imn]+ntor] = amnc[j_volume,imn]
    with warnings.catch_warnings(): # Block warning message that results from attempting to evaluate log(0)
        warnings.simplefilter("ignore")
        plt.imshow(np.log10(np.abs(amnc_2D)),interpolation='nearest',extent=[-ntor-0.5,ntor+0.5,mpol+0.5,-0.5])
    plt.title('log10(amnc) for surface '+str(j_volume+1))
    plt.xlabel('n')
    plt.ylabel('m')
    plt.colorbar()

plt.tight_layout()

plt.show()
